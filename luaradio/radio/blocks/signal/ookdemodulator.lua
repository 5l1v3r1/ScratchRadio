---
-- Implements a simple On/Off Keying demodulator, where the input is a sequence
-- of samples modulated using OOK at an arbitrary IF and the output is a bipolar
-- representation generated by taking a windowed average of the absolute values
-- of the input signal and then applying DC offset cancellation. This output is
-- suitable for use with a simple zero crossing detector for timing recovery.
-- The window size and DC cancellation coefficients are derived from the nominal
-- ratio of sample rate to symbol rate.
--
-- @category Demodulator
-- @block OokDemodulatorBlock
-- @tparam[opt=8] int oversamplingFactor Oversampling factor relative to bit rate.
--
-- @signature in:Float32 > out:Float32
--
-- @usage
-- local demodulator = radio.OokDemodulatorBlock(factor, saturate)

local block = require('radio.core.block')
local types = require('radio.types')

local OokDemodulatorBlock = block.factory("OokDemodulatorBlock")

function OokDemodulatorBlock:instantiate(oversamplingFactor, saturate)
    if (oversamplingFactor < 2) then
        error ("Invalid oversampling factor")
    else
        self.windowSize = math.ceil(2 * oversamplingFactor / 3)
        self.dcAlpha = math.exp(-1 / 8 * oversamplingFactor)
    end
    self.saturate = saturate

    self:add_type_signature({block.Input("in", types.Float32)}, {block.Output("out", types.Float32)})
end

function OokDemodulatorBlock:initialize()
    self.windowAccVal = 0
    self.windowVals = {}
    for i = 1, self.windowSize do
        self.windowVals[i] = 0
    end
    self.windowIndex = 1
    self.dcOffset = 0
    self.out = types.Float32.vector()
end

function OokDemodulatorBlock:process(x)
    local out = self.out:resize(x.length)

    for i = 0, x.length-1 do
        local thisSample = math.abs(x.data[i].value)

        -- Performs windowing function
        local accVal = self.windowAccVal + thisSample
        accVal = accVal - self.windowVals[self.windowIndex]
        self.windowAccVal = accVal
        self.windowVals[self.windowIndex] = thisSample
        if (self.windowIndex == self.windowSize) then
            self.windowIndex = 1
        else
            self.windowIndex = self.windowIndex + 1
        end

        -- Implements DC offset compensation
        self.dcOffset = self.dcOffset * self.dcAlpha + accVal * (1 - self.dcAlpha)

        -- Apply DC offset to windowed value
        local outVal = accVal - self.dcOffset
        if (self.saturate == true) then
            if (outVal > 0) then
                outVal = 1
            else
                outVal = -1
            end
        end
        out.data[i] = types.Float32(outVal)
        print (out.data[i])
    end

    return out
end

return OokDemodulatorBlock
